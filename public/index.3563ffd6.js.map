{"mappings":"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","sources":["node_modules/navigo/lib/webpack:/Navigo/webpack/universalModuleDefinition","node_modules/navigo/lib/webpack:/Navigo/src/constants.ts","node_modules/navigo/lib/webpack:/Navigo/src/utils.ts","node_modules/navigo/lib/webpack:/Navigo/src/Q.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/setLocationPath.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/matchPathToRegisteredRoutes.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/checkForDeprecationMethods.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/checkForForceOp.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/updateBrowserURL.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/checkForLeaveHook.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/updateState.ts","node_modules/navigo/lib/webpack:/Navigo/src/lifecycles.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/checkForAlreadyHook.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/checkForBeforeHook.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/callHandler.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/checkForAfterHook.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/checkForNotFoundHandler.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/errorOut.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/flushCurrent.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/processMatches.ts","node_modules/navigo/lib/webpack:/Navigo/src/middlewares/waitingList.ts","node_modules/navigo/lib/webpack:/Navigo/src/index.ts","node_modules/navigo/lib/webpack:/Navigo/webpack/bootstrap","node_modules/navigo/lib/webpack:/Navigo/webpack/startup","node_modules/navigo/lib/webpack:/Navigo/webpack/runtime/define property getters","node_modules/navigo/lib/webpack:/Navigo/webpack/runtime/hasOwnProperty shorthand","source/core/scripts/createRouteHandler.js","source/pages/Home.js","source/core/scripts/types.js","source/core/scripts/core.js","source/core/scripts/variables.js","source/core/scripts/assets.js","source/pages/User.js","node_modules/mitt/src/index.ts","source/scripts/app.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Navigo\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Navigo\"] = factory();\n\telse\n\t\troot[\"Navigo\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn ","export const PARAMETER_REGEXP = /([:*])(\\w+)/g;\nexport const REPLACE_VARIABLE_REGEXP = \"([^/]+)\";\nexport const WILDCARD_REGEXP = /\\*/g;\nexport const REPLACE_WILDCARD = \"?(?:.*)\";\nexport const NOT_SURE_REGEXP = /\\/\\?/g;\nexport const REPLACE_NOT_SURE = \"/?([^/]+|)\";\nexport const START_BY_SLASH_REGEXP = \"(?:/^|^)\";\nexport const MATCH_REGEXP_FLAGS = \"\";\n","import {\n  RouteHooksStorage,\n  Match,\n  Route,\n  NavigateOptions,\n  ResolveOptions,\n  QContext,\n  ResolveStrategy,\n} from \"../index\";\n\nimport {\n  PARAMETER_REGEXP,\n  WILDCARD_REGEXP,\n  REPLACE_VARIABLE_REGEXP,\n  REPLACE_WILDCARD,\n  START_BY_SLASH_REGEXP,\n  MATCH_REGEXP_FLAGS,\n  REPLACE_NOT_SURE,\n  NOT_SURE_REGEXP,\n} from \"./constants\";\n\nexport function getCurrentEnvURL(fallback = \"/\"): string {\n  if (windowAvailable()) {\n    return location.pathname + location.search + location.hash;\n  }\n  return fallback;\n}\nexport function clean(s: string) {\n  return s.replace(/\\/+$/, \"\").replace(/^\\/+/, \"\");\n}\nexport function isString(s: any): boolean {\n  return typeof s === \"string\";\n}\nexport function isFunction(s: any): boolean {\n  return typeof s === \"function\";\n}\nexport function extractHashFromURL(url: string) {\n  if (url && url.indexOf(\"#\") >= 0) {\n    return url.split(\"#\").pop() || \"\";\n  }\n  return \"\";\n}\nexport function regExpResultToParams(match, names: string[]) {\n  if (names.length === 0) return null;\n  if (!match) return null;\n  return match.slice(1, match.length).reduce((params, value, index) => {\n    if (params === null) params = {};\n    params[names[index]] = decodeURIComponent(value);\n    return params;\n  }, null);\n}\nexport function extractGETParameters(url: string) {\n  const tmp = clean(url).split(/\\?(.*)?$/);\n  return [clean(tmp[0]), tmp.slice(1).join(\"\")];\n}\nexport function parseQuery(queryString: string): Object {\n  var query = {};\n  var pairs = queryString.split(\"&\");\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i].split(\"=\");\n    if (pair[0] !== \"\") {\n      let key = decodeURIComponent(pair[0]);\n      if (!query[key]) {\n        query[key] = decodeURIComponent(pair[1] || \"\");\n      } else {\n        if (!Array.isArray(query[key])) query[key] = [query[key]];\n        query[key].push(decodeURIComponent(pair[1] || \"\"));\n      }\n    }\n  }\n  return query;\n}\nexport function matchRoute(context: QContext, route: Route): false | Match {\n  const [current, GETParams] = extractGETParameters(\n    clean(context.currentLocationPath)\n  );\n  const params = GETParams === \"\" ? null : parseQuery(GETParams);\n  const paramNames = [];\n  let pattern;\n  if (isString(route.path)) {\n    pattern =\n      START_BY_SLASH_REGEXP +\n      clean(route.path as string)\n        .replace(PARAMETER_REGEXP, function (full, dots, name) {\n          paramNames.push(name);\n          return REPLACE_VARIABLE_REGEXP;\n        })\n        .replace(WILDCARD_REGEXP, REPLACE_WILDCARD)\n        .replace(NOT_SURE_REGEXP, REPLACE_NOT_SURE) +\n      \"$\";\n    if (clean(route.path as string) === \"\") {\n      if (clean(current) === \"\") {\n        return {\n          url: current,\n          queryString: GETParams,\n          hashString: extractHashFromURL(context.to),\n          route: route,\n          data: null,\n          params,\n        };\n      }\n    }\n  } else {\n    pattern = route.path;\n  }\n  const regexp = new RegExp(pattern, MATCH_REGEXP_FLAGS);\n  const match = current.match(regexp);\n\n  if (match) {\n    const data = isString(route.path)\n      ? regExpResultToParams(match, paramNames)\n      : match.groups\n      ? match.groups\n      : match.slice(1);\n    return {\n      url: clean(current.replace(new RegExp(`^${context.instance.root}`), \"\")),\n      queryString: GETParams,\n      hashString: extractHashFromURL(context.to),\n      route: route,\n      data,\n      params,\n    };\n  }\n  return false;\n}\nexport function pushStateAvailable(): boolean {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.history &&\n    window.history.pushState\n  );\n}\nexport function undefinedOrTrue(obj, key: string): boolean {\n  return typeof obj[key] === \"undefined\" || obj[key] === true;\n}\nexport function parseNavigateOptions(source?: string): NavigateOptions {\n  if (!source) return {};\n  const pairs = source.split(\",\");\n  const options: NavigateOptions = {};\n  let resolveOptions: ResolveOptions;\n\n  pairs.forEach((str) => {\n    const temp = str.split(\":\").map((v) => v.replace(/(^ +| +$)/g, \"\"));\n    switch (temp[0]) {\n      case \"historyAPIMethod\":\n        options.historyAPIMethod = temp[1];\n        break;\n      case \"resolveOptionsStrategy\":\n        if (!resolveOptions) resolveOptions = {};\n        resolveOptions.strategy = temp[1] as ResolveStrategy;\n        break;\n      case \"resolveOptionsHash\":\n        if (!resolveOptions) resolveOptions = {};\n        resolveOptions.hash = temp[1] === \"true\";\n        break;\n      case \"updateBrowserURL\":\n      case \"callHandler\":\n      case \"updateState\":\n      case \"force\":\n        options[temp[0]] = temp[1] === \"true\";\n        break;\n    }\n  });\n  if (resolveOptions) {\n    options.resolveOptions = resolveOptions;\n  }\n  return options;\n}\nexport function windowAvailable() {\n  return typeof window !== \"undefined\";\n}\nexport function accumulateHooks(\n  hooks = [],\n  result: RouteHooksStorage = {}\n): RouteHooksStorage {\n  hooks\n    .filter((h) => h)\n    .forEach((h) => {\n      [\"before\", \"after\", \"already\", \"leave\"].forEach((type) => {\n        if (h[type]) {\n          if (!result[type]) result[type] = [];\n          result[type].push(h[type]);\n        }\n      });\n    });\n  return result as RouteHooksStorage;\n}\n","type QChild = {\n  type: \"child\";\n  funcs: Array<Function | Array<any> | QChild>;\n};\n\nexport default function Q(\n  funcs: Array<Function | Array<any> | QChild>,\n  c?: any,\n  done?: Function\n) {\n  const context = c || {};\n  let idx = 0;\n\n  (function next() {\n    if (!funcs[idx]) {\n      if (done) {\n        done(context);\n      }\n      return;\n    }\n    if (Array.isArray(funcs[idx])) {\n      funcs.splice(\n        idx,\n        1,\n        ...(funcs[idx][0](context) ? funcs[idx][1] : funcs[idx][2])\n      );\n      next();\n    } else {\n      // console.log(funcs[idx].name + \" / \" + JSON.stringify(context));\n      // console.log(funcs[idx].name);\n      (funcs[idx] as Function)(context, (moveForward) => {\n        if (typeof moveForward === \"undefined\" || moveForward === true) {\n          idx += 1;\n          next();\n        } else if (done) {\n          done(context);\n        }\n      });\n    }\n  })();\n}\n\nQ.if = function (condition: Function, one, two) {\n  if (!Array.isArray(one)) one = [one];\n  if (!Array.isArray(two)) two = [two];\n  return [condition, one, two];\n};\n","import { QContext } from \"../../index\";\nimport { getCurrentEnvURL } from \"../utils\";\n\nexport default function setLocationPath(context: QContext, done) {\n  if (typeof context.currentLocationPath === \"undefined\") {\n    context.currentLocationPath = context.to = getCurrentEnvURL(\n      context.instance.root\n    );\n  }\n  context.currentLocationPath = context.instance._checkForAHash(\n    context.currentLocationPath\n  );\n  done();\n}\n","import { matchRoute } from \"../utils\";\nimport { QContext, Match } from \"../../index\";\n\nexport default function matchPathToRegisteredRoutes(context: QContext, done) {\n  for (let i = 0; i < context.instance.routes.length; i++) {\n    const route = context.instance.routes[i];\n    const match: false | Match = matchRoute(context, route);\n    if (match) {\n      if (!context.matches) context.matches = [];\n      context.matches.push(match);\n      if (context.resolveOptions.strategy === \"ONE\") {\n        done();\n        return;\n      }\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function checkForDeprecationMethods(context: QContext, done) {\n  if (context.navigateOptions) {\n    if (typeof context.navigateOptions[\"shouldResolve\"] !== \"undefined\") {\n      console.warn(\n        `\"shouldResolve\" is deprecated. Please check the documentation.`\n      );\n    }\n    if (typeof context.navigateOptions[\"silent\"] !== \"undefined\") {\n      console.warn(`\"silent\" is deprecated. Please check the documentation.`);\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function checkForForceOp(context: QContext, done) {\n  if (context.navigateOptions.force === true) {\n    context.instance._setCurrent([\n      context.instance._pathToMatchObject(context.to),\n    ]);\n    done(false);\n  } else {\n    done();\n  }\n}\n","import { undefinedOrTrue, pushStateAvailable, windowAvailable } from \"../utils\";\nimport { QContext } from \"../../index\";\n\nconst isWindowAvailable = windowAvailable();\nconst isPushStateAvailable = pushStateAvailable();\n\nexport default function updateBrowserURL(context: QContext, done) {\n  if (undefinedOrTrue(context.navigateOptions, \"updateBrowserURL\")) {\n    const value = `/${context.to}`.replace(/\\/\\//g, \"/\"); // making sure that we don't have two slashes\n    const isItUsingHash =\n      isWindowAvailable &&\n      context.resolveOptions &&\n      context.resolveOptions.hash === true;\n    if (isPushStateAvailable) {\n      history[context.navigateOptions.historyAPIMethod || \"pushState\"](\n        context.navigateOptions.stateObj || {},\n        context.navigateOptions.title || \"\",\n        isItUsingHash ? `#${value}` : value\n      );\n      // This is to solve a nasty bug where the page doesn't scroll to the anchor.\n      // We set a microtask to update the hash only.\n      if (location && location.hash) {\n        context.instance.__freezeListening = true;\n        setTimeout(() => {\n          if (!isItUsingHash) {\n            let tmp = location.hash;\n            location.hash = \"\";\n            location.hash = tmp;\n          }\n          context.instance.__freezeListening = false;\n        }, 1);\n      }\n    } else if (isWindowAvailable) {\n      window.location.href = context.to;\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\nimport Q from \"../Q\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function checkForLeaveHook(context: QContext, done) {\n  const instance = context.instance;\n  if (!instance.lastResolved()) {\n    done();\n    return;\n  }\n  Q(\n    instance.lastResolved().map((oldMatch) => {\n      return (_, leaveLoopDone) => {\n        // no leave hook\n        if (!oldMatch.route.hooks || !oldMatch.route.hooks.leave) {\n          leaveLoopDone();\n          return;\n        }\n        let runHook = false;\n        const newLocationVSOldMatch = context.instance.matchLocation(\n          oldMatch.route.path,\n          context.currentLocationPath,\n          false\n        );\n        if (oldMatch.route.path !== \"*\") {\n          runHook = !newLocationVSOldMatch;\n        } else {\n          const someOfTheLastOnesMatch = context.matches\n            ? context.matches.find((match) => {\n                return oldMatch.route.path === match.route.path;\n              })\n            : false;\n          runHook = !someOfTheLastOnesMatch;\n        }\n        if (undefinedOrTrue(context.navigateOptions, \"callHooks\") && runHook) {\n          Q(\n            oldMatch.route.hooks.leave\n              .map((f) => {\n                // just so we match the Q interface\n                return (_, d) =>\n                  f(\n                    (shouldStop) => {\n                      if (shouldStop === false) {\n                        context.instance.__markAsClean(context);\n                      } else {\n                        d();\n                      }\n                    },\n                    context.matches && context.matches.length > 0\n                      ? context.matches.length === 1\n                        ? context.matches[0]\n                        : context.matches\n                      : undefined\n                  );\n              })\n              .concat([() => leaveLoopDone()])\n          );\n          return;\n        } else {\n          leaveLoopDone();\n        }\n      };\n    }),\n    {},\n    () => done()\n  );\n}\n","import { QContext } from \"../../index\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function updateState(context: QContext, done) {\n  if (undefinedOrTrue(context.navigateOptions, \"updateState\")) {\n    context.instance._setCurrent(context.matches);\n  }\n  done();\n}\n","import { QContext } from \"../index\";\nimport Q from \"./Q\";\nimport checkForLeaveHook from \"./middlewares/checkForLeaveHook\";\nimport checkForBeforeHook from \"./middlewares/checkForBeforeHook\";\nimport callHandler from \"./middlewares/callHandler\";\nimport checkForAfterHook from \"./middlewares/checkForAfterHook\";\nimport checkForAlreadyHook from \"./middlewares/checkForAlreadyHook\";\nimport checkForNotFoundHandler from \"./middlewares/checkForNotFoundHandler\";\nimport errorOut from \"./middlewares/errorOut\";\nimport flushCurrent from \"./middlewares/flushCurrent\";\nimport updateState from \"./middlewares/updateState\";\n\nexport const foundLifecycle = [\n  checkForAlreadyHook,\n  checkForBeforeHook,\n  callHandler,\n  checkForAfterHook,\n];\n\nexport const notFoundLifeCycle = [\n  checkForLeaveHook,\n  checkForNotFoundHandler,\n  Q.if(\n    ({ notFoundHandled }: QContext) => notFoundHandled,\n    foundLifecycle.concat([updateState]),\n    [errorOut, flushCurrent]\n  ),\n];\n","import { QContext } from \"../../index\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function checkForAlreadyHook(context: QContext, done) {\n  const current = context.instance.lastResolved();\n  if (\n    current &&\n    current[0] &&\n    current[0].route === context.match.route &&\n    current[0].url === context.match.url &&\n    current[0].queryString === context.match.queryString\n  ) {\n    current.forEach((c) => {\n      if (c.route.hooks && c.route.hooks.already) {\n        if (undefinedOrTrue(context.navigateOptions, \"callHooks\")) {\n          c.route.hooks.already.forEach((f) => f(context.match));\n        }\n      }\n    });\n    done(false);\n    return;\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\nimport Q from \"../Q\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function checkForBeforeHook(context: QContext, done) {\n  if (\n    context.match.route.hooks &&\n    context.match.route.hooks.before &&\n    undefinedOrTrue(context.navigateOptions, \"callHooks\")\n  ) {\n    Q(\n      context.match.route.hooks.before\n        .map((f) => {\n          // just so we match the Q interface\n          return function beforeHookInternal(_, d) {\n            return f((shouldStop) => {\n              if (shouldStop === false) {\n                context.instance.__markAsClean(context);\n              } else {\n                d();\n              }\n            }, context.match);\n          };\n        })\n        .concat([() => done()])\n    );\n  } else {\n    done();\n  }\n}\n","import { QContext } from \"../../index\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function callHandler(context: QContext, done) {\n  if (undefinedOrTrue(context.navigateOptions, \"callHandler\")) {\n    context.match.route.handler(context.match);\n  }\n  context.instance.updatePageLinks();\n  done();\n}\n","import { QContext } from \"../../index\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function checkForAfterHook(context: QContext, done) {\n  if (\n    context.match.route.hooks &&\n    context.match.route.hooks.after &&\n    undefinedOrTrue(context.navigateOptions, \"callHooks\")\n  ) {\n    context.match.route.hooks.after.forEach((f) => f(context.match));\n  }\n  done();\n}\n","import { QContext, Match } from \"../../index\";\nimport {\n  parseQuery,\n  extractGETParameters,\n  clean,\n  extractHashFromURL,\n} from \"../utils\";\n\nexport default function checkForNotFoundHandler(context: QContext, done) {\n  const notFoundRoute = context.instance._notFoundRoute;\n  if (notFoundRoute) {\n    context.notFoundHandled = true;\n    const [url, queryString] = extractGETParameters(\n      context.currentLocationPath\n    );\n    const hashString = extractHashFromURL(context.to);\n    notFoundRoute.path = clean(url);\n    const notFoundMatch: Match = {\n      url: notFoundRoute.path,\n      queryString,\n      hashString,\n      data: null,\n      route: notFoundRoute,\n      params: queryString !== \"\" ? parseQuery(queryString) : null,\n    };\n    context.matches = [notFoundMatch];\n    context.match = notFoundMatch;\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function errorOut(context: QContext, done) {\n  if (\n    !context.resolveOptions ||\n    context.resolveOptions.noMatchWarning === false ||\n    typeof context.resolveOptions.noMatchWarning === \"undefined\"\n  )\n    console.warn(\n      `Navigo: \"${context.currentLocationPath}\" didn't match any of the registered routes.`\n    );\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function flushCurrent(context: QContext, done) {\n  context.instance._setCurrent(null);\n  done();\n}\n","import { QContext } from \"../../index\";\nimport Q from \"../Q\";\nimport { foundLifecycle } from \"../lifecycles\";\nimport updateState from \"./updateState\";\nimport checkForLeaveHook from \"./checkForLeaveHook\";\n\nexport default function processMatches(context: QContext, done) {\n  let idx = 0;\n  function nextMatch() {\n    if (idx === context.matches.length) {\n      updateState(context, done);\n      return;\n    }\n    Q(\n      foundLifecycle,\n      { ...context, match: context.matches[idx] },\n      function end() {\n        idx += 1;\n        nextMatch();\n      }\n    );\n  }\n  checkForLeaveHook(context, nextMatch);\n}\n","import { QContext } from \"../../index\";\n\nexport default function waitingList(context: QContext) {\n  context.instance.__markAsClean(context);\n}\n","import {\n  Match,\n  Route,\n  RouteHooks,\n  QContext,\n  NavigateOptions,\n  ResolveOptions,\n  GenerateOptions,\n  Handler,\n  RouterOptions,\n} from \"../index\";\nimport NavigoRouter from \"../index\";\nimport {\n  pushStateAvailable,\n  matchRoute,\n  parseQuery,\n  extractGETParameters,\n  isFunction,\n  isString,\n  clean,\n  parseNavigateOptions,\n  windowAvailable,\n  getCurrentEnvURL,\n  accumulateHooks,\n  extractHashFromURL,\n} from \"./utils\";\nimport Q from \"./Q\";\nimport setLocationPath from \"./middlewares/setLocationPath\";\nimport matchPathToRegisteredRoutes from \"./middlewares/matchPathToRegisteredRoutes\";\nimport checkForDeprecationMethods from \"./middlewares/checkForDeprecationMethods\";\nimport checkForForceOp from \"./middlewares/checkForForceOp\";\nimport updateBrowserURL from \"./middlewares/updateBrowserURL\";\nimport processMatches from \"./middlewares/processMatches\";\nimport waitingList from \"./middlewares/waitingList\";\n\nimport { notFoundLifeCycle } from \"./lifecycles\";\n\nconst DEFAULT_LINK_SELECTOR = \"[data-navigo]\";\n\nexport default function Navigo(appRoute?: string, options?: RouterOptions) {\n  let DEFAULT_RESOLVE_OPTIONS: RouterOptions = options || {\n    strategy: \"ONE\",\n    hash: false,\n    noMatchWarning: false,\n    linksSelector: DEFAULT_LINK_SELECTOR,\n  };\n  let self: NavigoRouter = this;\n  let root = \"/\";\n  let current: Match[] = null;\n  let routes: Route[] = [];\n  let destroyed = false;\n  let genericHooks: RouteHooks;\n\n  const isPushStateAvailable = pushStateAvailable();\n  const isWindowAvailable = windowAvailable();\n\n  if (!appRoute) {\n    console.warn(\n      'Navigo requires a root path in its constructor. If not provided will use \"/\" as default.'\n    );\n  } else {\n    root = clean(appRoute);\n  }\n\n  function _checkForAHash(url: string): string {\n    if (url.indexOf(\"#\") >= 0) {\n      if (DEFAULT_RESOLVE_OPTIONS.hash === true) {\n        url = url.split(\"#\")[1] || \"/\";\n      } else {\n        url = url.split(\"#\")[0];\n      }\n    }\n    return url;\n  }\n  function composePathWithRoot(path: string) {\n    return clean(`${root}/${clean(path)}`);\n  }\n  function createRoute(\n    path: string | RegExp,\n    handler: Handler,\n    hooks: RouteHooks[],\n    name?: string\n  ): Route {\n    path = isString(path) ? composePathWithRoot(path as string) : path;\n    return {\n      name: name || clean(String(path)),\n      path,\n      handler,\n      hooks: accumulateHooks(hooks),\n    };\n  }\n\n  // public APIs\n  function on(\n    path: string | Function | Object | RegExp,\n    handler?: Handler,\n    hooks?: RouteHooks\n  ) {\n    if (typeof path === \"object\" && !(path instanceof RegExp)) {\n      Object.keys(path).forEach((p) => {\n        if (typeof path[p] === \"function\") {\n          this.on(p, path[p]);\n        } else {\n          const { uses: handler, as: name, hooks } = path[p];\n          routes.push(createRoute(p, handler, [genericHooks, hooks], name));\n        }\n      });\n      return this;\n    } else if (typeof path === \"function\") {\n      hooks = handler as RouteHooks;\n      handler = path as Handler;\n      path = root;\n    }\n    routes.push(\n      createRoute(path as string | RegExp, handler, [genericHooks, hooks])\n    );\n    return this;\n  }\n  function resolve(to?: string, options?: ResolveOptions): false | Match[] {\n    if (self.__dirty) {\n      self.__waiting.push(() => self.resolve(to, options));\n      return;\n    } else {\n      self.__dirty = true;\n    }\n    to = to ? `${clean(root)}/${clean(to)}` : undefined;\n    // console.log(\"-- resolve --> \" + to, self.__dirty);\n    const context: QContext = {\n      instance: self,\n      to,\n      currentLocationPath: to,\n      navigateOptions: {},\n      resolveOptions: { ...DEFAULT_RESOLVE_OPTIONS, ...options },\n    };\n    Q(\n      [\n        setLocationPath,\n        matchPathToRegisteredRoutes,\n        Q.if(\n          ({ matches }: QContext) => matches && matches.length > 0,\n          processMatches,\n          notFoundLifeCycle\n        ),\n      ],\n      context,\n      waitingList\n    );\n\n    return context.matches ? context.matches : false;\n  }\n  function navigate(to: string, navigateOptions?: NavigateOptions): void {\n    // console.log(\"-- navigate --> \" + to, self.__dirty);\n    if (self.__dirty) {\n      self.__waiting.push(() => self.navigate(to, navigateOptions));\n      return;\n    } else {\n      self.__dirty = true;\n    }\n    to = `${clean(root)}/${clean(to)}`;\n    const context: QContext = {\n      instance: self,\n      to,\n      navigateOptions: navigateOptions || {},\n      resolveOptions:\n        navigateOptions && navigateOptions.resolveOptions\n          ? navigateOptions.resolveOptions\n          : DEFAULT_RESOLVE_OPTIONS,\n      currentLocationPath: _checkForAHash(to),\n    };\n    Q(\n      [\n        checkForDeprecationMethods,\n        checkForForceOp,\n        matchPathToRegisteredRoutes,\n        Q.if(\n          ({ matches }: QContext) => matches && matches.length > 0,\n          processMatches,\n          notFoundLifeCycle\n        ),\n        updateBrowserURL,\n        waitingList,\n      ],\n      context,\n      waitingList\n    );\n  }\n  function navigateByName(\n    name: string,\n    data?: Object,\n    options?: NavigateOptions\n  ): boolean {\n    const url = generate(name, data);\n    if (url !== null) {\n      navigate(url.replace(new RegExp(`^\\/?${root}`), \"\"), options);\n      return true;\n    }\n    return false;\n  }\n  function off(what: string | RegExp | Function) {\n    this.routes = routes = routes.filter((r) => {\n      if (isString(what)) {\n        return clean(r.path as string) !== clean(what as string);\n      } else if (isFunction(what)) {\n        return what !== r.handler;\n      }\n      return String(r.path) !== String(what);\n    });\n    return this;\n  }\n  function listen() {\n    if (isPushStateAvailable) {\n      this.__popstateListener = () => {\n        if (!self.__freezeListening) {\n          resolve();\n        }\n      };\n      window.addEventListener(\"popstate\", this.__popstateListener);\n    }\n  }\n  function destroy() {\n    this.routes = routes = [];\n    if (isPushStateAvailable) {\n      window.removeEventListener(\"popstate\", this.__popstateListener);\n    }\n    this.destroyed = destroyed = true;\n  }\n  function notFound(handler, hooks?: RouteHooks) {\n    self._notFoundRoute = createRoute(\n      \"*\",\n      handler,\n      [genericHooks, hooks],\n      \"__NOT_FOUND__\"\n    );\n    return this;\n  }\n  function updatePageLinks() {\n    if (!isWindowAvailable) return;\n    findLinks().forEach((link) => {\n      if (\n        \"false\" === link.getAttribute(\"data-navigo\") ||\n        \"_blank\" === link.getAttribute(\"target\")\n      ) {\n        if (link.hasListenerAttached) {\n          link.removeEventListener(\"click\", link.navigoHandler);\n        }\n        return;\n      }\n      if (!link.hasListenerAttached) {\n        link.hasListenerAttached = true;\n        link.navigoHandler = function (e) {\n          if (\n            (e.ctrlKey || e.metaKey) &&\n            e.target.tagName.toLowerCase() === \"a\"\n          ) {\n            return false;\n          }\n          let location = link.getAttribute(\"href\");\n          if (typeof location === \"undefined\" || location === null) {\n            return false;\n          }\n          // handling absolute paths\n          if (location.match(/^(http|https)/) && typeof URL !== \"undefined\") {\n            try {\n              const u = new URL(location);\n              location = u.pathname + u.search;\n            } catch (err) {}\n          }\n          const options = parseNavigateOptions(\n            link.getAttribute(\"data-navigo-options\")\n          );\n\n          if (!destroyed) {\n            e.preventDefault();\n            e.stopPropagation();\n            self.navigate(clean(location), options);\n          }\n        };\n        link.addEventListener(\"click\", link.navigoHandler);\n      }\n    });\n    return self;\n  }\n  function findLinks() {\n    if (isWindowAvailable) {\n      return [].slice.call(\n        document.querySelectorAll(\n          DEFAULT_RESOLVE_OPTIONS.linksSelector || DEFAULT_LINK_SELECTOR\n        )\n      );\n    }\n    return [];\n  }\n  function link(path: string) {\n    return `/${root}/${clean(path)}`;\n  }\n  function setGenericHooks(hooks: RouteHooks) {\n    genericHooks = hooks;\n    return this;\n  }\n  function lastResolved(): Match[] | null {\n    return current;\n  }\n  function generate(\n    name: string,\n    data?: Object,\n    options?: GenerateOptions\n  ): string {\n    const route = routes.find((r) => r.name === name);\n    let result = null;\n    if (route) {\n      result = route.path as string;\n      if (data) {\n        for (let key in data) {\n          result = result.replace(\":\" + key, data[key]);\n        }\n      }\n      result = !result.match(/^\\//) ? `/${result}` : result;\n    }\n    if (result && options && !options.includeRoot) {\n      result = result.replace(new RegExp(`^/${root}`), \"\");\n    }\n    return result;\n  }\n  function getLinkPath(link) {\n    return link.getAttribute(\"href\");\n  }\n  function pathToMatchObject(path: string): Match {\n    const [url, queryString] = extractGETParameters(clean(path));\n    const params = queryString === \"\" ? null : parseQuery(queryString);\n    const hashString = extractHashFromURL(path);\n    const route = createRoute(url, () => {}, [genericHooks], url);\n    return {\n      url,\n      queryString,\n      hashString,\n      route,\n      data: null,\n      params: params,\n    };\n  }\n  function getCurrentLocation(): Match {\n    return pathToMatchObject(\n      clean(getCurrentEnvURL(root)).replace(new RegExp(`^${root}`), \"\")\n    );\n  }\n  function directMatchWithRegisteredRoutes(path: string): false | Match[] {\n    const context: QContext = {\n      instance: self,\n      currentLocationPath: path,\n      to: path,\n      navigateOptions: {},\n      resolveOptions: DEFAULT_RESOLVE_OPTIONS,\n    };\n    matchPathToRegisteredRoutes(context, () => {});\n    return context.matches ? context.matches : false;\n  }\n  function directMatchWithLocation(\n    path: string | RegExp,\n    currentLocation?: string,\n    annotatePathWithRoot?: boolean\n  ): false | Match {\n    if (\n      typeof currentLocation !== \"undefined\" &&\n      (typeof annotatePathWithRoot === \"undefined\" || annotatePathWithRoot)\n    ) {\n      currentLocation = composePathWithRoot(currentLocation);\n    }\n    const context: QContext = {\n      instance: self,\n      to: currentLocation,\n      currentLocationPath: currentLocation,\n    };\n    setLocationPath(context, () => {});\n    if (typeof path === \"string\") {\n      path =\n        typeof annotatePathWithRoot === \"undefined\" || annotatePathWithRoot\n          ? composePathWithRoot(path)\n          : path;\n    }\n    const match = matchRoute(context, {\n      name: String(path),\n      path,\n      handler: () => {},\n      hooks: {},\n    });\n    return match ? match : false;\n  }\n  function addHook(\n    type: string,\n    route: Route | string,\n    func: Function\n  ): Function {\n    if (typeof route === \"string\") {\n      route = getRoute(route);\n    }\n    if (route) {\n      if (!route.hooks[type]) route.hooks[type] = [];\n      route.hooks[type].push(func);\n      return () => {\n        (route as Route).hooks[type] = (route as Route).hooks[type].filter(\n          (f) => f !== func\n        );\n      };\n    } else {\n      console.warn(`Route doesn't exists: ${route}`);\n    }\n    return () => {};\n  }\n  function getRoute(nameOrHandler: string | Function): Route | undefined {\n    if (typeof nameOrHandler === \"string\") {\n      return routes.find((r) => r.name === composePathWithRoot(nameOrHandler));\n    }\n    return routes.find((r) => r.handler === nameOrHandler);\n  }\n  function __markAsClean(context: QContext) {\n    context.instance.__dirty = false;\n    if (context.instance.__waiting.length > 0) {\n      context.instance.__waiting.shift()();\n    }\n  }\n\n  this.root = root;\n  this.routes = routes;\n  this.destroyed = destroyed;\n  this.current = current;\n  this.__freezeListening = false;\n  this.__waiting = [];\n  this.__dirty = false;\n  this.__markAsClean = __markAsClean;\n\n  this.on = on;\n  this.off = off;\n  this.resolve = resolve;\n  this.navigate = navigate;\n  this.navigateByName = navigateByName;\n  this.destroy = destroy;\n  this.notFound = notFound;\n  this.updatePageLinks = updatePageLinks;\n  this.link = link;\n  this.hooks = setGenericHooks;\n  this.extractGETParameters = (url) =>\n    extractGETParameters(_checkForAHash(url));\n  this.lastResolved = lastResolved;\n  this.generate = generate;\n  this.getLinkPath = getLinkPath;\n  this.match = directMatchWithRegisteredRoutes;\n  this.matchLocation = directMatchWithLocation;\n  this.getCurrentLocation = getCurrentLocation;\n  this.addBeforeHook = addHook.bind(this, \"before\");\n  this.addAfterHook = addHook.bind(this, \"after\");\n  this.addAlreadyHook = addHook.bind(this, \"already\");\n  this.addLeaveHook = addHook.bind(this, \"leave\");\n  this.getRoute = getRoute;\n  this._pathToMatchObject = pathToMatchObject;\n  this._clean = clean;\n  this._checkForAHash = _checkForAHash;\n  this._setCurrent = (c) => (current = self.current = c);\n\n  listen.call(this);\n  updatePageLinks.call(this);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(407);\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","export default (uses, hooks = {}, name = undefined) => {\n    const route = {\n        uses,\n    };\n\n    if (Object.keys(hooks).length) {\n        route.hooks = hooks;\n    }\n\n    if (name) {\n        route.as = name;\n    }\n\n    return route;\n};","import createRouteHandler from '../core/scripts/createRouteHandler';\n\nexport default createRouteHandler((route) => {\n    console.log('Home');\n});","export const _slice = [].slice;\n\n/**\n * Cast string to most applicable data type\n *\n * @protected\n * @param {*} val\n */\n export function _castString(val) {\n    if (typeof val === 'string') {\n        try {\n            val = val === 'true' ? true :\n                val === 'false' ? false :\n                    val === 'null' ? null :\n                        parseInt(val).toString() === val ? parseInt(val) :\n                            /^(?:\\{[\\w\\W]*}|\\[[\\w\\W]*])$/.test(val) ? JSON.parse(val) :\n                                val;\n        } catch (e) {}\n    }\n\n    return val;\n}\n\n\n/**\n * Extend target object with source object(s)\n *\n * @private\n * @param {Object} target\n * @param {Object} object\n * @param {boolean} [deep=false]\n * @param {Array} [_set=[]]\n * @returns {Object}\n */\nexport function _extend(target, object, deep, _set = []) {\n    if (!object) {\n        return target;\n    }\n\n    for (const key in object) {\n        let src = object[key],\n            type = $type(src);\n\n        if (deep && type == 'object') {\n            let len = _set.length,\n                i = 0,\n                val;\n\n            for (; i < len; i++) {\n                if (_set[i] === src) {\n                    val = src;\n                    break;\n                }\n            }\n\n            if (val) {\n                target[key] = val;\n            } else {\n                _set.push(src);\n                target[key] = _extend(target[key] || {}, src, deep, _set);\n            }\n        } else if (src !== undefined) {\n            target[key] = type == 'array' ? src.slice(0) : src;\n        }\n    }\n\n    return target;\n}\n\n/**\n * Extend target object with source object(s)\n *\n * @param {(boolean|Object)} deep - extend nested properties else target object\n * @param {Object} [obj] - target object\n * @param {...Object} [obj] - merged objects\n * @returns {Object}\n */\n export function $extend(deep) {\n    let bool = typeof deep === 'boolean',\n        args = _slice.call(arguments).slice(bool ? 1 : 0),\n        target = args[0] || {};\n    deep = bool ? deep : false;\n\n    args.slice(1).forEach((source) => {\n        target = _extend(target, source, deep);\n    });\n\n    return target;\n}\n\n/**\n * Determine the JavaScript type of an object\n *\n * @param {*} obj\n * @returns string\n */\nexport function $type(obj) {\n    return obj === undefined ? 'undefined' :\n        Object.prototype.toString.call(obj)\n        .replace(/^\\[object (.+)]$/, '$1')\n        .toLowerCase();\n}\n\n/**\n * Determine if value is an object\n *\n * @param {*} obj\n * @returns {boolean}\n */\n export function $isObject(obj) {\n    return $type(obj) === 'object';\n}\n\n/**\n * Determine if value is a string\n *\n * @param {*} obj\n * @returns {boolean}\n */\n export function $isString(obj) {\n    return typeof obj === 'string';\n}\n\n/**\n * Cast value to array if it isn't one\n *\n * @param {*} val\n * @returns {Array} value\n */\nexport function $toArray(val) {\n    return val !== undefined ? (Array.isArray(val) ? val : [val]) : [];\n}\n\n/**\n * Serialize object\n *\n * @param {Object} obj\n * @returns {string} value\n */\n export function $serialize(obj) {\n    const arr = [];\n\n    Object.keys(obj || {}).forEach((key) => {\n        const val = obj[key];\n        key = encodeURIComponent(key);\n\n        if (typeof val !== 'object') {\n            arr.push(`${key}=${encodeURIComponent(val)}`);\n        } else if (Array.isArray(val)) {\n            val.forEach((el) => {\n                arr.push(`${key}[]=${encodeURIComponent(el)}`);\n            });\n        }\n    });\n\n    return arr.length ? arr.join('&').replace(/%20/g, '+') : '';\n}\n\n/**\n * Convert serialized string back into an object\n *\n * @param {string} str\n * @returns {Object} value\n */\n export function $unserialize(str) {\n    const obj = {};\n\n    decodeURIComponent(str)\n        .replace(/^\\?/, '')\n        .split('&').forEach((el) => {\n            let split = el.split('='),\n                key = split[0].replace('[]', ''),\n                val = (split[1] || '').replace(/\\+/g, ' ') || '',\n                isArrayProp = /\\[\\]/.test(split[0]);\n\n            if (obj.hasOwnProperty(key)) {\n                obj[key] = $toArray(obj[key]);\n                obj[key].push(_castString(val));\n            } else {\n                obj[key] = isArrayProp ? [_castString(val)] : _castString(val);\n            }\n        });\n\n    return obj;\n}","import { $toArray, _extend } from './types';\n\nexport const isBrowser = typeof window === 'object';\n\n/**\n * Execute specified function or Array of functions\n *\n * @param {Array|function} fn\n * @param {Object} [options]\n * @param {Array} [options.args]\n * @param {Object} [options.scope]\n * @returns {*} [response]\n */\nexport function $exec(fn, options = {}) {\n    let fns = $toArray(fn),\n        len = fns.length,\n        i = 0,\n        response;\n\n    for (; i < len; i++) {\n        const conf = _extend({\n            args: [],\n        }, options);\n\n        response = fns[i].apply(\n            conf.scope,\n            $toArray(conf.args),\n        );\n\n        if (len === 1) {\n            return response;\n        }\n    }\n}","import { isBrowser } from './core';\n\nconst D = isBrowser ? window.document : {};\nconst scope = isBrowser ? window : global;\n\n// Export globals for use in other modules\nexport const _doc = D;\nexport const _body = D.body;\nexport const _html = D.documentElement;\nexport const _win = scope;\nexport const U = undefined;","import { $exec } from './core';\nimport { _doc, U } from './variables';\nimport { $toArray, $extend, $isString } from './types';\n\nconst groups = {};\nconst loaded = {};\nlet root = '';\nlet groupId = 1;\n\nexport const _load = {\n    js(path, conf) {\n        const js = _doc.createElement('script');\n\n        js.async = conf.async === true;\n        js.defer = conf.defer === true;\n        js.onload = () => {\n            loaded[js.src] = js;\n            _done(conf.group);\n        };\n\n        js.onerror = () => {\n            _fail(conf.group);\n        };\n\n        js.src = path;\n        _doc.head.appendChild(js);\n    },\n\n    /**\n     * Request stylesheet\n     *\n     * @private\n     * @param {string} path\n     * @param {Object} conf\n     * @param {string} conf.group\n     */\n    css(path, conf) {\n        const link = _doc.createElement('link');\n\n        link.rel = 'stylesheet';\n        link.href = path;\n\n        link.addEventListener('load', () => {\n            loaded[link.href] = link;\n            _done(conf.group);\n        }, false);\n\n        link.addEventListener('error', () => {\n            _fail(conf.group);\n        }, false);\n\n        _doc.head.appendChild(link);\n    },\n\n    /**\n     * Request image\n     *\n     * @private\n     * @param {string} path\n     * @param {Object} conf\n     * @param {string} conf.group\n     */\n    img(path, conf) {\n        const img = new Image();\n\n        img.onload = function () {\n            _done(conf.group);\n        };\n\n        img.onerror = function () {\n            _fail(conf.group);\n        };\n\n        img.src = path;\n    },\n};\n\n/**\n * Increment failed asset count\n *\n * @private\n * @param {string} group\n */\nfunction _fail(group) {\n    groups[group][2]++;\n    _done(group);\n}\n\n\n/**\n * Decrement remaining asset count\n *\n * @private\n * @param {string} group\n */\nfunction _done(group) {\n    groups[group][0]--;\n    assetModule.ready(group, {}, false);\n}\n\nconst assetModule = {\n    /**\n     * Get current asset root or set with specified value\n     *\n     * @param {string} [value]\n     * @returns {string} root\n     */\n    root(value) {\n        if ($isString(value)) {\n            root = value;\n        }\n\n        return root;\n    },\n\n    /**\n     * Load specified assets with set options\n     *\n     * @param {Object} options\n     * @param {boolean} [options.async=false]\n     * @param {boolean} [options.cache=false]\n     * @param {(Array|string)} [options.styles]\n     * @param {(Array|function|string)} [options.error]\n     * @param {(Array|string)} [options.files]\n     * @param {string} [options.group]\n     * @param {(Array|string)} [options.images]\n     * @param {(Array|string)} [options.scripts]\n     * @param {string} [options.root]\n     * @param {(Array|function|string)} [options.success]\n     */\n    load(options) {\n        const files = $toArray(options.files);\n        const js = $toArray(options.scripts);\n        const css = $toArray(options.styles);\n        const img = $toArray(options.images);\n        const root = options.root !== U ? options.root : this.root();\n        const assets = {};\n        let i = 0;\n        let type;\n\n        // Create group name if not specified\n        if (! options.group) {\n            options.group = `g${groupId++}`;\n        }\n\n        // Determine file type\n        for (; i < files.length; i++) {\n            const ext = files[i].split('.').pop().split(/#|\\?/)[0];\n            type = ext === 'js' || ext === 'css' ?\n                ext : /(gif|jpe?g|png|svg|webp)$/i.test(ext) ?\n                    'img' : '';\n\n            if (type) {\n                assets[files[i]] = type;\n            }\n        }\n\n        for (i = 0; i < js.length; i++) {\n            assets[js[i]] = 'js';\n        }\n\n        for (i = 0; i < css.length; i++) {\n            assets[css[i]] = 'css';\n        }\n\n        for (i = 0; i < img.length; i++) {\n            assets[img[i]] = 'img';\n        }\n\n        // Set file array length to check against\n        groups[options.group] = [\n            Object.keys(assets).length,\n            options,\n            0,\n        ];\n\n        // Request each specified file\n        for (let file in assets) {\n            if (assets.hasOwnProperty(file)) {\n                const noCache = options.cache === false;\n                const a = _doc.createElement('a');\n\n                type = assets[file];\n                a.href = (root && /^(https?:)?\\/\\//i.test(file) ? '' : root) +\n                    file;\n                file = a.href;\n\n                if (! loaded[file] || noCache) {\n                    if (noCache) {\n                        file += (file.indexOf('?') < 0 ? '?' : '&') + Date.now();\n                    }\n\n                    _load[type](file, options);\n                } else {\n                    _done(options.group);\n                }\n            }\n        }\n    },\n\n    /**\n     * Remove one or more files from the DOM\n     *\n     * @param {(Array|string)} files\n     * @param {string} [root='']\n     */\n    remove(files, root = '') {\n        files = $toArray(files);\n\n        const a = _doc.createElement('a');\n        let i = 0;\n\n        for (; i < files.length; i++) {\n            let src = root + files[i];\n            a.href = src;\n            src = a.href;\n\n            let el = loaded[src];\n\n            if (el !== U) {\n                el.parentNode.removeChild(el);\n                el = null;\n                delete loaded[src];\n            }\n        }\n    },\n\n    /**\n     * Execute callback when specified references are ready\n     *\n     * @param {string} group\n     * @param {Object} [options]\n     * @param {Array} [options.args]\n     * @param {(Array|function|string)} [options.error]\n     * @param {Object} [options.scope]\n     * @param {(Array|function|string)} [options.success]\n     * @param {boolean} [poll=false]\n     * @returns {boolean} ready\n     */\n    ready(group, options, poll) {\n        const set = groups[group];\n        const complete = set && ! set[0];\n\n        if (options === U) {\n            return complete;\n        }\n\n        if (complete) {\n            const conf = $extend(set[1], options);\n            const hasErrors = set[2];\n            options = {\n                args: conf.args,\n                scope: conf.scope,\n            };\n\n            if (conf.error && hasErrors) {\n                $exec(conf.error, options);\n            } else if (conf.success && ! hasErrors) {\n                $exec(conf.success, options);\n            }\n        } else if (poll) {\n            setTimeout(() => {\n                this.ready(group, options, true);\n            }, 20);\n        }\n    },\n};\n\n/**\n * Cache existing CSS and JavaScript assets\n */\n[..._doc.querySelectorAll('link[rel=\"stylesheet\"], script[src]')]\n    .forEach((el) => loaded[el.src || el.href] = el);\n\nexport default assetModule;","import mitt from 'mitt'\nimport assets from '../core/scripts/assets';\nimport createRouteHandler from '../core/scripts/createRouteHandler';\n\nexport default createRouteHandler(async (route) => {\n    emitter = mitt();\n\n    emitter.on('test', () => {\n        console.log('test 2');\n    });\n\n    assets.load({\n        root: 'https://cdnjs.cloudflare.com/ajax/libs',\n        files: [\n            '/mapbox-gl/1.13.2/mapbox-gl.js',\n            '/hover.css/2.3.1/css/hover-min.css',\n        ],\n        success() {\n            emitter.emit('test');\n        },\n    });\n});","export type EventType = string | symbol;\n\n// An event handler can take an optional event argument\n// and should not return a value\nexport type Handler<T = unknown> = (event: T) => void;\nexport type WildcardHandler<T = Record<string, unknown>> = (\n\ttype: keyof T,\n\tevent: T[keyof T]\n) => void;\n\n// An array of all currently registered event handlers for a type\nexport type EventHandlerList<T = unknown> = Array<Handler<T>>;\nexport type WildCardEventHandlerList<T = Record<string, unknown>> = Array<WildcardHandler<T>>;\n\n// A map of event types and their corresponding event handlers.\nexport type EventHandlerMap<Events extends Record<EventType, unknown>> = Map<\n\tkeyof Events | '*',\n\tEventHandlerList<Events[keyof Events]> | WildCardEventHandlerList<Events>\n>;\n\nexport interface Emitter<Events extends Record<EventType, unknown>> {\n\tall: EventHandlerMap<Events>;\n\n\ton<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;\n\ton(type: '*', handler: WildcardHandler<Events>): void;\n\n\toff<Key extends keyof Events>(type: Key, handler?: Handler<Events[Key]>): void;\n\toff(type: '*', handler: WildcardHandler<Events>): void;\n\n\temit<Key extends keyof Events>(type: Key, event: Events[Key]): void;\n\temit<Key extends keyof Events>(type: undefined extends Events[Key] ? Key : never): void;\n}\n\n/**\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\n * @name mitt\n * @returns {Mitt}\n */\nexport default function mitt<Events extends Record<EventType, unknown>>(\n\tall?: EventHandlerMap<Events>\n): Emitter<Events> {\n\ttype GenericEventHandler =\n\t\t| Handler<Events[keyof Events]>\n\t\t| WildcardHandler<Events>;\n\tall = all || new Map();\n\n\treturn {\n\n\t\t/**\n\t\t * A Map of event names to registered handler functions.\n\t\t */\n\t\tall,\n\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\n\t\t * @param {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton<Key extends keyof Events>(type: Key, handler: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\thandlers.push(handler);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tall!.set(type, [handler] as EventHandlerList<Events[keyof Events]>);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t * If `handler` is omitted, all handlers of the given type are removed.\n\t\t * @param {string|symbol} type Type of event to unregister `handler` from, or `'*'`\n\t\t * @param {Function} [handler] Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff<Key extends keyof Events>(type: Key, handler?: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\tif (handler) {\n\t\t\t\t\thandlers.splice(handlers.indexOf(handler) >>> 0, 1);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tall!.set(type, []);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `'*'` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * Note: Manually firing '*' handlers is not supported.\n\t\t *\n\t\t * @param {string|symbol} type The event type to invoke\n\t\t * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit<Key extends keyof Events>(type: Key, evt?: Events[Key]) {\n\t\t\tlet handlers = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as EventHandlerList<Events[keyof Events]>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(evt!);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\thandlers = all!.get('*');\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as WildCardEventHandlerList<Events>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(type, evt!);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n","import Navigo from 'navigo';\nimport Home from '../pages/Home';\nimport User from '../pages/User';\n\nconst router = new Navigo('/');\n\nrouter.on({\n    '/': Home,\n    '/users/:user': User,\n}).resolve();"],"names":["root","factory","self","this","PARAMETER_REGEXP","WILDCARD_REGEXP","NOT_SURE_REGEXP","getCurrentEnvURL","fallback","windowAvailable","location","pathname","search","hash","clean","s","replace","isString","extractHashFromURL","url","indexOf","split","pop","extractGETParameters","tmp","slice","join","parseQuery","queryString","query","pairs","i","length","pair","key","decodeURIComponent","Array","isArray","push","matchRoute","context","route","pattern","a","currentLocationPath","current","GETParams","params","paramNames","path","full","dots","name","hashString","to","data","regexp","RegExp","match","names","reduce","value","index","groups","instance","pushStateAvailable","window","history","pushState","undefinedOrTrue","obj","accumulateHooks","hooks","result","filter","h","forEach","type","Q","funcs","c","done","idx","next","splice","apply","concat","moveForward","setLocationPath","_checkForAHash","matchPathToRegisteredRoutes","routes","matches","resolveOptions","strategy","checkForDeprecationMethods","navigateOptions","shouldResolve","console","warn","silent","checkForForceOp","force","_setCurrent","_pathToMatchObject","if","condition","one","two","isWindowAvailable","isPushStateAvailable","updateBrowserURL","isItUsingHash","historyAPIMethod","stateObj","title","__freezeListening","setTimeout","href","checkForLeaveHook","lastResolved","map","oldMatch","_","leaveLoopDone","leave","runHook","newLocationVSOldMatch","matchLocation","find","f","d","shouldStop","__markAsClean","updateState","foundLifecycle","already","before","handler","updatePageLinks","after","notFoundLifeCycle","notFoundRoute","_notFoundRoute","notFoundHandled","o","notFoundMatch","t","noMatchWarning","processMatches","nextMatch","E","waitingList","DEFAULT_LINK_SELECTOR","Navigo","appRoute","options","genericHooks","DEFAULT_RESOLVE_OPTIONS","linksSelector","destroyed","composePathWithRoot","createRoute","String","resolve","__dirty","j","__waiting","navigate","call","document","querySelectorAll","link","getAttribute","hasListenerAttached","navigoHandler","e","ctrlKey","metaKey","target","tagName","toLowerCase","URL","u","err","source","str","temp","v","preventDefault","stopPropagation","addEventListener","removeEventListener","generate","r","includeRoot","pathToMatchObject","n","addHook","func","getRoute","nameOrHandler","shift","on","Object","keys","p","uses","as","off","what","navigateByName","destroy","__popstateListener","notFound","getLinkPath","currentLocation","annotatePathWithRoot","getCurrentLocation","addBeforeHook","bind","addAfterHook","addAlreadyHook","addLeaveHook","_clean","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","definition","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","default","define","amd","$7ba695f413021cec$export$2e2bcd8739ae039","$47979d8280d89cbd$export$2e2bcd8739ae039","log","$4778ce850c336ebb$export$88aef7c773df5d08","$4778ce850c336ebb$export$1cda9d8dbbcbd6b1","object","deep","_set","src","$4778ce850c336ebb$export$9ec23b75654060a7","val","len","undefined","toString","$4778ce850c336ebb$export$c5a89a15a8b215c7","$e99045534a4dc542$export$4e09c449d6c407f7","$e99045534a4dc542$export$fd60dc111902a9f9","fn","response","fns","conf","args","scope","$a479cc7b814acce9$var$D","$a479cc7b814acce9$export$c8e38cabd6539a48","$8cc7a6d1b17c0c84$var$groups","body","documentElement","$8cc7a6d1b17c0c84$var$loaded","$8cc7a6d1b17c0c84$var$root","$8cc7a6d1b17c0c84$var$groupId","$8cc7a6d1b17c0c84$export$5830754203bf594a","js","createElement","async","defer","onload","$8cc7a6d1b17c0c84$var$_done","group","onerror","$8cc7a6d1b17c0c84$var$_fail","head","appendChild","css","rel","img","Image","$8cc7a6d1b17c0c84$var$assetModule","ready","load","files","scripts","styles","images","assets","ext","test","file","noCache","cache","Date","now","remove","el","parentNode","removeChild","poll","set","complete","bool","arguments","$4778ce850c336ebb$export$a85ce4af57d6b2bc","hasErrors","error","success","$8cc7a6d1b17c0c84$export$2e2bcd8739ae039","$82d28b9a6cd01fcd$export$2e2bcd8739ae039","emitter","all","Map","handlers","emit","evt","$7e8d8e8b6b9a15e8$export$2e2bcd8739ae039","$parcel$interopDefault","$f21af6331da84a03$exports"],"version":3,"file":"index.3563ffd6.js.map"}